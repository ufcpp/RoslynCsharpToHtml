@using CsharpToHtmlWinApp.Models
@inject ClassfierWorkspace Workspace
@inject IClipboardService Clipboard

<div>
    path to csproj:
    <input @bind="Workspace.CsprojPath" style="width: 80%;" />
</div>


@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
<div class="row">
    <div class="column left">
        <button @onclick="Open">@(@Workspace.IsOpen ? "Reload" : "Open") Project</button>

        <ul>
            @foreach (var doc in @Workspace.Documents)
            {
                <li><button @onclick="async () => await Classify(doc)">@doc.ShortName</button></li>
            }
        </ul>
    </div>

    <div class="column middle">
        <pre>@markup.Value</pre>
        <button @onclick="CopyMarkupToClipboard">Copy</button>
    </div>

    <div class="column right">
        @markup
        <button @onclick="CopyOriginalSourceToClipboard">Copy</button>
    </div>
</div>

    <div class="message">@Message</div>
}

@code {

    private bool isLoading;

    private MarkupString markup;
    private string? originalSource;

    private string? Message;

    protected override async Task OnInitializedAsync()
    {
        await ShowMessage($".NET SDK Version: {Workspace.DetnetSdkVersion}");
        await base.OnInitializedAsync();
    }

    private async Task ShowMessage(string message)
    {
        Message = message;
        await Task.Delay(3000);
        Message = "";
    }

    private async Task Open()
    {
        isLoading = true;
        await Workspace.OpenProjectAsync();
        await Classify();
        isLoading = false;
    }

    private string? _lastDocName;

    private async Task Classify()
    {
        if (Workspace.FindDocument(_lastDocName) is { } doc)
            await Classify(doc);
    }

    private async Task Classify(ClassfierDocument doc)
    {
        _lastDocName = doc.ShortName;
        isLoading = true;
        var (original, html) = await doc.ClassifyAsync();
        isLoading = false;
        originalSource = original;
        markup = (MarkupString)html;
    }

    private async Task CopyMarkupToClipboard()
    {
        if (markup.Value is { } v)
            await Clipboard.WriteTextAsync(v);
    }

    private async Task CopyOriginalSourceToClipboard()
    {
        if (originalSource is not null)
            await Clipboard.WriteTextAsync(originalSource);
    }
}
